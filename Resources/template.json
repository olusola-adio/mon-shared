{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sharedPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix for all resources created for the project (except storage account, see below). Should be in thee format mon-env-proj"
      }
    },
    "aksAgentVmSize": {
      "type": "string"
    },
    "aksAgentNodeCount": {
      "type": "int"
    },
    "aksDnsServiceIp": {
      "type": "string"
    },
    "aksKubernetesVersion": {
      "type": "string"
    },
    "aksNodeResourceGroupName": {
      "type": "string"
    },
    "aksRbacClientAppId": {
      "type": "string"
    },
    "aksRbacServerAppId": {
      "type": "string"
    },
    "aksRbacServerAppSecret": {
      "type": "securestring"
    },
    "aksRbacTenantId": {
      "type": "string"
    },
    "aksRouteTableName": {
      "type": "string"
    },
    "aksServiceCidr": {
      "type": "string"
    },
    "aksServicePrincipalClientId": {
      "type": "string"
    },
    "aksServicePrincipalSecret": {
      "type": "securestring"
    },
    "aksSubnetName": {
      "type": "string"
    },
    "aksVirtualNetworkAddressPrefix": {
      "type": "string"
    },
    "aksVnetName": {
      "type": "string"
    },
    "aksVnetCreate": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Bool to determine whether to create a VNet for AKS - defaults to create a VNet"
      }
    },
    "aksVnetResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Only required if the VNet will be externally created (ie PP or PROD).  The resource group that holds the VNet that AKS will be connected to."
      }
    },
    "aksAppGatewaySubnetName": {
      "type": "string"
    },
    "defaultKeyVaultReadAccess": {
      "type": "array",
      "defaultValue": [
      ]
    },
    "defaultKeyVaultWriteAccess": {
      "type": "array",
      "defaultValue": [
      ],
      "metadata": {
        "description": "A list of azure service pricipals to assign write access to certificates on the shared key vault"
      }
    },
    "environmentName": {
      "type": "string",
      "allowedValues": [
        "DEV",
        "SIT",
        "LAB",
        "OAT",
        "PP",
        "PRD"
      ]
    }
  },
  "variables": {
    "monDevOpsTemplatesUrl": "https://raw.githubusercontent.com/olusola-adio/mon-devops/master/ArmTemplates/",
    "localTemplatesUrl": "https://raw.githubusercontent.com/olusola-adio/mon-shared/master/Resources/",
    "keyVaultName": "[concat(parameters('sharedPrefix'),'-kv')]",
    "storageAccountName": "[concat(replace(parameters('sharedPrefix'),'-',''),'str')]",
    "functionAppName": "[concat(parameters('sharedPrefix'),'-fa')]",
    "functionAppInsightName": "[concat(parameters('sharedPrefix'),'-ai')]",
    "appServicePlanName": "[concat(parameters('sharedPrefix'),'-asp')]",
    "defaultKeyVaultReadAccessHack": "[if(empty(parameters('defaultKeyVaultReadAccess')), 1, length(parameters('defaultKeyVaultReadAccess')))]",
    "defaultKeyVaultWriteAccessHack": "[if(empty(parameters('defaultKeyVaultWriteAccess')), 1, length(parameters('defaultKeyVaultWriteAccess')))]",
    "containerRegistryName": "[toLower(concat(replace(parameters('sharedPrefix'),'-',''),'cr'))]",
    "aksClusterName": "[concat(parameters('sharedPrefix'), '-aks')]",
    "aksNodeResourceGroupName": "[concat(variables('aksClusterName'), 'nodes-rg')]"
  },
  "resources": [
    {
      "name": "containerRegistry",
      "type": "Microsoft.Resources/deployments",
      "condition": "[or(equals(parameters('environmentName'), 'DEV'), equals(parameters('environmentName'), 'PRD'))]",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('monDevOpsTemplatesUrl'), 'container-registry.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "containerRegistryName": {
            "value": "[variables('containerRegistryName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "name": "sharedAzureKubernetesServiceNetwork",
      "type": "Microsoft.Resources/deployments",
      "condition": "[parameters('aksVnetCreate')]",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('localTemplatesUrl'), 'networks/aks-vnet.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "aksNodeResourceGroupName": {
            "value": "[parameters('aksNodeResourceGroupName')]"
          },
          "aksRouteTableName": {
            "value": "[parameters('aksRouteTableName')]"
          },
          "aksSubnetName": {
            "value": "[parameters('aksSubnetName')]"
          },
          "aksAppGatewaySubnetName": {
            "value": "[parameters('aksAppGatewaySubnetName')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('aksVirtualNetworkAddressPrefix')]"
          },
          "vnetName": {
            "value": "[parameters('aksVnetName')]"
          }
        }
      }
    },
    {
      "name": "sharedAzureKubernetesService",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('monDevOpsTemplatesUrl'),'aks.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "clusterName": {
            "value": "[variables('aksClusterName')]"
          },
          "agentVMSize": {
            "value": "[parameters('aksAgentVmSize')]"
          },
          "agentNodeCount": {
            "value": "[parameters('aksAgentNodeCount')]"
          },
          "dnsServiceIp": {
            "value": "[parameters('aksDnsServiceIp')]"
          },
          "kubernetesVersion": {
            "value": "[parameters('aksKubernetesVersion')]"
          },
          "nodeResourceGroup": {
            "value": "[variables('aksNodeResourceGroupName')]"
          },
          "rbacClientAppId": {
            "value": "[parameters('aksRbacClientAppId')]"
          },
          "rbacServerAppId": {
            "value": "[parameters('aksRbacServerAppId')]"
          },
          "rbacServerAppSecret": {
            "value": "[parameters('aksRbacServerAppSecret')]"
          },
          "rbacTenantId": {
            "value": "[parameters('aksRbacTenantId')]"
          },
          "serviceCidr": {
            "value": "[parameters('aksServiceCidr')]"
          },
          "servicePrincipalClientId": {
            "value": "[parameters('aksServicePrincipalClientId')]"
          },
          "servicePrincipalSecret": {
            "value": "[parameters('aksServicePrincipalSecret')]"
          },
          "subnetName": {
            "value": "[parameters('aksSubnetName')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('aksVnetName')]"
          },
          "virtualNetworkResourceGroup": {
            "value": "[if(parameters('aksVnetCreate'), resourceGroup().name, parameters('aksVnetResourceGroupName'))]"
          }
        }
      },
      "dependsOn": [
        "sharedAzureKubernetesServiceNetwork"
      ]
    },
    {
      "name": "sharedKeyVault",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('monDevOpsTemplatesUrl'),'keyvault.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          }
        }
      }
    },
    {
      "name": "[concat('sharedKeyVaultDefaultReadAccessPolicy-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "condition": "[greater(length(parameters('defaultKeyVaultReadAccess')), 0)]",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('monDevOpsTemplatesUrl'),'/KeyVault/keyvault-access-policy.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "servicePrincipalObjectId": {
            "value": "[parameters('defaultKeyVaultReadAccess')[copyIndex()]]"
          },
          "secretPermissions": {
            "value": [
              "get",
              "list"
            ]
          },
          "certificatePermissions": {
            "value": [
              "get",
              "list",
              "getissuers",
              "listissuers"
            ]
          }
        }
      },
      "dependsOn": [
        "sharedKeyVault"
      ],
      "metadata": {
        "description": "The count parameter in the copy block is populated with either the length of the defaultKeyVaultReadAccess parameter, or 1 if it's empty  and is to work around copyIndex erroring when it's 0, even if it's in a conditional block."
      },
      "copy": {
        "name": "keyvaultReadAccessCopy",
        "count": "[variables('defaultKeyVaultReadAccessHack')]",
        "mode": "Serial",
        "batchSize": 1
      }
    },
    {
      "name": "[concat('sharedKeyVaultDefaultWriteAccessPolicy-', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "condition": "[greater(length(parameters('defaultKeyVaultWriteAccess')), 0)]",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('monDevOpsTemplatesUrl'),'/KeyVault/keyvault-access-policy.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "servicePrincipalObjectId": {
            "value": "[parameters('defaultKeyVaultWriteAccess')[copyIndex()]]"
          },
          "secretPermissions": {
            "value": [
              "set",
              "delete",
              "purge"
            ]
          },
          "certificatePermissions": {
            "value": [
              "create",
              "update",
              "setissuers"
            ]
          }
        }
      },
      "dependsOn": [
        "sharedKeyVault",
        "keyvaultReadAccessCopy"
      ],
      "metadata": {
        "description": "The count parameter in copy block is populated with either the length of the certificateWriteAccess parameter, or 1 if it's empty  and is to work around copyIndex erroring when it's 0, even if it's in a conditional block."
      },
      "copy": {
        "name": "defaultKeyVaultWriteAccessCopy",
        "count": "[variables('defaultKeyVaultWriteAccessHack')]",
        "mode": "Serial",
        "batchSize": 1
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[resourceGroup().location]",
      "sku": {
          "name": "Y1",
          "tier": "Dynamic"
      },
      "properties": {
          "name": "[variables('appServicePlanName')]",
          "computeMode": "Dynamic"
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[variables('functionAppInsightName')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('monDevOpsTemplatesUrl'), 'application-insights.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[variables('functionAppInsightName')]"
          },
          "attachedService": {
            "value": ""
          }
        }
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
          "[variables('functionAppInsightName')]"
      ],
      "properties": {
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
          "siteConfig": {
              "appSettings": [
                  {
                      "name": "AzureWebJobsDashboard",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountName'),'2015-05-01-preview').key1)]"
                  },
                  {
                      "name": "AzureWebJobsStorage",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountName'),'2015-05-01-preview').key1)]"
                  },
                  {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountName'),'2015-05-01-preview').key1)]"
                  },
                  {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[toLower(variables('functionAppName'))]"
                  },
                  {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~3"
                  },
                  {
                      "name": "WEBSITE_NODE_DEFAULT_VERSION",
                      "value": "8.11.1"
                  },
                  {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(variables('functionAppInsightName')).outputs.InstrumentationKey.value]"
                  },
                  {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "powershell"
                  }
              ]
          }
      }
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "KeyVaultUri": {
      "type": "string",
      "value": "[reference('sharedKeyVault','2017-05-10').outputs.KeyVaultUri.value]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    }
  }
}
